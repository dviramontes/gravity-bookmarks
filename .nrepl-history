(class "dsad")
(doc map-index)
(js/alert "dsakldm")
(find-doc frequencies)
(apropos freq
)
(apropos "freq")
(frequencies [1 2 3 4 1 23 3])
(:23 (frequencies [1 2 3 4 1 23 3]))
(into {}(frequencies [1 2 3 4 1 23 3]))
(into {} (frequencies [1 2 3 4 1 23 3]))
(frequencies [1 2 3 4 1 23 3])
( 23 (frequencies [1 2 3 4 1 23 3]))
 23 (frequencies [1 2 3 4 1 23 3]))
(23 (frequencies [1 2 3 4 1 23 3]))
( 23 (frequencies [1 2 3 4 1 23 3]))
(doc frequencies)
(apropos "slurp")
(doc slurp)
(def data (slurp "resource
s/kimonoData-clean-v1.json")
(def data (slurp "resources/kimonoData-clean-v1.json")
)
(pprint data)
(print data)
(def data-two '(1 2 3 4 222 1 1 1 1 2 3))
(frequencies data-two)
(key (frequencies data-two))
(into key (frequencies data-two))
(doc key)
(range 3)
(reductions (range 3))
(reductions apply * (range 3))
(doc reductions)
keyword
(keyword 1)
(keyword )
(keyword a)
(keyword 'a)
(keyword "a")
(frequencies data-two)
(map keyword (frequencies data-two))
(map keyword first (frequencies data-two))
(map keyword (frequencies data-two))
(map first (frequencies data-two))
(keyword (map first (frequencies data-two)))
(map first (frequencies data-two)))
(map first (frequencies data-two))
(-> first (frequencies data-two))
(-> first frequencies data-two)
(-> data-two frequencies)
(-> data-two frequencies first)
(-> data-two frequencies map first)
(-> data-two frequencies)
(keyword (-> data-two frequencies))
(-> data-two frequencies)
(-> data-two frequencies map first)
(-> data-two frequencies)
(-> data-two frequencies (map first))
(-> data-two frequencies (map keyword))
(-> data-two frequencies first)
(-> data-two frequencies)
(-> data-two frequencies (first keyword))
(-> data-two frequencies keyword)
(-> data-two frequencies apply keyword)
(-> data-two frequencies (apply first keyword)
)
(-> data-two frequencies)
(apropos "key")
(keywordize-keys {1 1, 2 3, 4 5})
(use 'clojure.walk)
(keywordize-keys {1 1, 2 3, 4 5})
(keywordize-keys {1 1, 2 3, "s" 5})
(-> data-two frequencies (apply first keyword)
(-> data-two frequencies)
(string 3)
(str 3)
(-> data-two frequencies)
(-> data-two frequencies (apply key str))
(-> data-two frequencies (apply str))
(-> data-two frequencies (map str)
)
(-> data-two frequencies)
(map str first (-> data-two frequencies))
(apply str first (-> data-two frequencies))
(apply str (-> data-two frequencies))
(-> data-two frequencies)
(-> data-two )
(-> data-two frequencies (apply str)
)
(-> data-two frequencies)
(first (-> data-two frequencies))
(-> data-two frequencies)
(:1 (-> data-two frequencies))
(1 (-> data-two frequencies))
( (-> data-two frequencies))
(map (-> data-two frequencies))
(map (-> data-two frequencies) first)
(map keys (-> data-two frequencies))
(keys (-> data-two frequencies))
(map keyword (keys (-> data-two frequencies))_
(map keyword (keys (-> data-two frequencies)))
(map str (keys (-> data-two frequencies)))
(keyword (map str (keys (-> data-two frequencies))))
(map str (keys (-> data-two frequencies))))
(map str (keys (-> data-two frequencies)))
;;(map str (keys (-> data-two frequencies)))
(-> data-two frequencies
keys)
(-> data-two frequencies keys (map str))
(-> data-two frequencies keys str)
(-> data-two frequencies keys map)
(-> data-two frequencies keys map str)
(-> data-two frequencies keys map)
(-> data-two frequencies keys)
(doc for)
(apropos "filter")
(doc filter)
(find-doc filter)
(find-doc "filter")
(def r (range 10))
r
(doc zipmap)
(cycle "a" "b" "c")
(cycle '("a" "b" "c"))
(take 5 (cycle '("a" "b" "c")))
(take 15 (cycle '("a" "b" "c")))
(def r (zipmap (take 14 (cycle '(:a :b :c :d :e))) (range 15)))
(r)
r
(def r (zipmap (take 15 (cycle '(:a :b :c))) (range 15)))
r
(def r (zipmap (take 15 (cycle '(:a :b :c))) (range 5)))
r
(def r (zipmap (take 50 (cycle '(:a :b :c))) (range 50)))
r
(def r (zipmap (take 50 (cycle '("a" "b" "c" "d"))) (range 50)))
r
(def r (zipmap (take 50 (cycle '(:a :b :c :a :b :c))) (range 50)))
r
(def r (zipmap (take 15 (cycle '(:a :b :c :a :b :c))) (range 15)))
r
(cycle '(:a :b :c :d))
(take 15 (cycle '(:a :b :c :d)))
(zip (take 15 (cycle '(:a :b :c :d))) (range 15))
(zipmap (take 15 (cycle '(:a :b :c :d))) (range 15))
(merge (take 15 (cycle '(:a :b :c :d))) (range 15))
(apropos merge)
(apropos "merge")
(doc merge)
(doc zipmap)
(doc merge-with)
(def x {:a 3, :b 5, :c 30})
(max-key key x)
(max-key x)
(max-key val x)
(max-key key x)
(doc max-key)
(max-key x)
(max-key max x)
(max-key max key x)
(max-key (key max) x)
(max-key (max key) x)
(max 1 2 3 4 5)
(max-key x_
(max-key x)
(max-key key)
(key (apply max-key val x))
(map val x)
(max (map val x))
(apply max (map val x))
(doc key0
(doc key)
x
(val x 3)
(val 3)
(key 3)
(key x 3)
(key x )
(key x)
(key 3 x)
(key x :a)
(key :a x)
(key x)
(key x :a) 
(key :a x) 
x
(x 3)
(:a x)
(5 x)
(val x)
(vals x)
(doc find)
(apros find-)
(apropos find)
(apropos "find")
(apropos "key")
(aprops map)
(apropos map)
(apropos "map")
(vec 3)
(vector 3)
(require 'package)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives
             '("tromey" . "http://tromey.com/elpa/") t)
(add-to-list 'package-archives
(require 'package)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives
             '("tromey" . "http://tromey.com/elpa/") t)
(add-to-list 'package-archives
(key (apply max-key val {:a 3 :b 43 :c 10}))
(apply max-key val {:a 3 :b 43 :c 10})
(apply val {:a 3 :b 43 :c 10})
(apply max-key {:a 3 :b 43 :c 10})
(empty? {})
